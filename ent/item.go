// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemdescription"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges ItemEdges `json:"edges"`
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// ItemDescription holds the value of the item_description edge.
	ItemDescription *ItemDescription `json:"item_description,omitempty"`
	// ItemVariation holds the value of the item_variation edge.
	ItemVariation []*ItemVariation `json:"item_variation,omitempty"`
	// ItemGroup holds the value of the item_group edge.
	ItemGroup []*ItemGroup `json:"item_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ItemDescriptionOrErr returns the ItemDescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) ItemDescriptionOrErr() (*ItemDescription, error) {
	if e.loadedTypes[0] {
		if e.ItemDescription == nil {
			// The edge item_description was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: itemdescription.Label}
		}
		return e.ItemDescription, nil
	}
	return nil, &NotLoadedError{edge: "item_description"}
}

// ItemVariationOrErr returns the ItemVariation value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ItemVariationOrErr() ([]*ItemVariation, error) {
	if e.loadedTypes[1] {
		return e.ItemVariation, nil
	}
	return nil, &NotLoadedError{edge: "item_variation"}
}

// ItemGroupOrErr returns the ItemGroup value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ItemGroupOrErr() ([]*ItemGroup, error) {
	if e.loadedTypes[2] {
		return e.ItemGroup, nil
	}
	return nil, &NotLoadedError{edge: "item_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldID:
			values[i] = &sql.NullInt64{}
		case item.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		}
	}
	return nil
}

// QueryItemDescription queries the "item_description" edge of the Item entity.
func (i *Item) QueryItemDescription() *ItemDescriptionQuery {
	return (&ItemClient{config: i.config}).QueryItemDescription(i)
}

// QueryItemVariation queries the "item_variation" edge of the Item entity.
func (i *Item) QueryItemVariation() *ItemVariationQuery {
	return (&ItemClient{config: i.config}).QueryItemVariation(i)
}

// QueryItemGroup queries the "item_group" edge of the Item entity.
func (i *Item) QueryItemGroup() *ItemGroupQuery {
	return (&ItemClient{config: i.config}).QueryItemGroup(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
