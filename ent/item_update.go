// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemdescription"
	"github.com/ogataka50/ent-test/ent/itemgroup"
	"github.com/ogataka50/ent-test/ent/itemvariation"
	"github.com/ogataka50/ent-test/ent/predicate"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where adds a new predicate for the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.predicates = append(iu.mutation.predicates, ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetItemDescriptionID sets the "item_description" edge to the ItemDescription entity by ID.
func (iu *ItemUpdate) SetItemDescriptionID(id int) *ItemUpdate {
	iu.mutation.SetItemDescriptionID(id)
	return iu
}

// SetNillableItemDescriptionID sets the "item_description" edge to the ItemDescription entity by ID if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemDescriptionID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetItemDescriptionID(*id)
	}
	return iu
}

// SetItemDescription sets the "item_description" edge to the ItemDescription entity.
func (iu *ItemUpdate) SetItemDescription(i *ItemDescription) *ItemUpdate {
	return iu.SetItemDescriptionID(i.ID)
}

// AddItemVariationIDs adds the "item_variation" edge to the ItemVariation entity by IDs.
func (iu *ItemUpdate) AddItemVariationIDs(ids ...int) *ItemUpdate {
	iu.mutation.AddItemVariationIDs(ids...)
	return iu
}

// AddItemVariation adds the "item_variation" edges to the ItemVariation entity.
func (iu *ItemUpdate) AddItemVariation(i ...*ItemVariation) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddItemVariationIDs(ids...)
}

// AddItemGroupIDs adds the "item_group" edge to the ItemGroup entity by IDs.
func (iu *ItemUpdate) AddItemGroupIDs(ids ...int) *ItemUpdate {
	iu.mutation.AddItemGroupIDs(ids...)
	return iu
}

// AddItemGroup adds the "item_group" edges to the ItemGroup entity.
func (iu *ItemUpdate) AddItemGroup(i ...*ItemGroup) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddItemGroupIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearItemDescription clears the "item_description" edge to the ItemDescription entity.
func (iu *ItemUpdate) ClearItemDescription() *ItemUpdate {
	iu.mutation.ClearItemDescription()
	return iu
}

// ClearItemVariation clears all "item_variation" edges to the ItemVariation entity.
func (iu *ItemUpdate) ClearItemVariation() *ItemUpdate {
	iu.mutation.ClearItemVariation()
	return iu
}

// RemoveItemVariationIDs removes the "item_variation" edge to ItemVariation entities by IDs.
func (iu *ItemUpdate) RemoveItemVariationIDs(ids ...int) *ItemUpdate {
	iu.mutation.RemoveItemVariationIDs(ids...)
	return iu
}

// RemoveItemVariation removes "item_variation" edges to ItemVariation entities.
func (iu *ItemUpdate) RemoveItemVariation(i ...*ItemVariation) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveItemVariationIDs(ids...)
}

// ClearItemGroup clears all "item_group" edges to the ItemGroup entity.
func (iu *ItemUpdate) ClearItemGroup() *ItemUpdate {
	iu.mutation.ClearItemGroup()
	return iu
}

// RemoveItemGroupIDs removes the "item_group" edge to ItemGroup entities by IDs.
func (iu *ItemUpdate) RemoveItemGroupIDs(ids ...int) *ItemUpdate {
	iu.mutation.RemoveItemGroupIDs(ids...)
	return iu
}

// RemoveItemGroup removes "item_group" edges to ItemGroup entities.
func (iu *ItemUpdate) RemoveItemGroup(i ...*ItemGroup) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveItemGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
	}
	if iu.mutation.ItemDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.ItemDescriptionTable,
			Columns: []string{item.ItemDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.ItemDescriptionTable,
			Columns: []string{item.ItemDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ItemVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedItemVariationIDs(); len(nodes) > 0 && !iu.mutation.ItemVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemVariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ItemGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedItemGroupIDs(); len(nodes) > 0 && !iu.mutation.ItemGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ItemGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// SetName sets the "name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetItemDescriptionID sets the "item_description" edge to the ItemDescription entity by ID.
func (iuo *ItemUpdateOne) SetItemDescriptionID(id int) *ItemUpdateOne {
	iuo.mutation.SetItemDescriptionID(id)
	return iuo
}

// SetNillableItemDescriptionID sets the "item_description" edge to the ItemDescription entity by ID if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemDescriptionID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetItemDescriptionID(*id)
	}
	return iuo
}

// SetItemDescription sets the "item_description" edge to the ItemDescription entity.
func (iuo *ItemUpdateOne) SetItemDescription(i *ItemDescription) *ItemUpdateOne {
	return iuo.SetItemDescriptionID(i.ID)
}

// AddItemVariationIDs adds the "item_variation" edge to the ItemVariation entity by IDs.
func (iuo *ItemUpdateOne) AddItemVariationIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.AddItemVariationIDs(ids...)
	return iuo
}

// AddItemVariation adds the "item_variation" edges to the ItemVariation entity.
func (iuo *ItemUpdateOne) AddItemVariation(i ...*ItemVariation) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddItemVariationIDs(ids...)
}

// AddItemGroupIDs adds the "item_group" edge to the ItemGroup entity by IDs.
func (iuo *ItemUpdateOne) AddItemGroupIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.AddItemGroupIDs(ids...)
	return iuo
}

// AddItemGroup adds the "item_group" edges to the ItemGroup entity.
func (iuo *ItemUpdateOne) AddItemGroup(i ...*ItemGroup) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddItemGroupIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearItemDescription clears the "item_description" edge to the ItemDescription entity.
func (iuo *ItemUpdateOne) ClearItemDescription() *ItemUpdateOne {
	iuo.mutation.ClearItemDescription()
	return iuo
}

// ClearItemVariation clears all "item_variation" edges to the ItemVariation entity.
func (iuo *ItemUpdateOne) ClearItemVariation() *ItemUpdateOne {
	iuo.mutation.ClearItemVariation()
	return iuo
}

// RemoveItemVariationIDs removes the "item_variation" edge to ItemVariation entities by IDs.
func (iuo *ItemUpdateOne) RemoveItemVariationIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.RemoveItemVariationIDs(ids...)
	return iuo
}

// RemoveItemVariation removes "item_variation" edges to ItemVariation entities.
func (iuo *ItemUpdateOne) RemoveItemVariation(i ...*ItemVariation) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveItemVariationIDs(ids...)
}

// ClearItemGroup clears all "item_group" edges to the ItemGroup entity.
func (iuo *ItemUpdateOne) ClearItemGroup() *ItemUpdateOne {
	iuo.mutation.ClearItemGroup()
	return iuo
}

// RemoveItemGroupIDs removes the "item_group" edge to ItemGroup entities by IDs.
func (iuo *ItemUpdateOne) RemoveItemGroupIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.RemoveItemGroupIDs(ids...)
	return iuo
}

// RemoveItemGroup removes "item_group" edges to ItemGroup entities.
func (iuo *ItemUpdateOne) RemoveItemGroup(i ...*ItemGroup) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveItemGroupIDs(ids...)
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Item.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
	}
	if iuo.mutation.ItemDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.ItemDescriptionTable,
			Columns: []string{item.ItemDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.ItemDescriptionTable,
			Columns: []string{item.ItemDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ItemVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedItemVariationIDs(); len(nodes) > 0 && !iuo.mutation.ItemVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemVariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ItemVariationTable,
			Columns: []string{item.ItemVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ItemGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedItemGroupIDs(); len(nodes) > 0 && !iuo.mutation.ItemGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ItemGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   item.ItemGroupTable,
			Columns: item.ItemGroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: itemgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
