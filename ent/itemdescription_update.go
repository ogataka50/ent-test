// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemdescription"
	"github.com/ogataka50/ent-test/ent/predicate"
)

// ItemDescriptionUpdate is the builder for updating ItemDescription entities.
type ItemDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *ItemDescriptionMutation
}

// Where adds a new predicate for the ItemDescriptionUpdate builder.
func (idu *ItemDescriptionUpdate) Where(ps ...predicate.ItemDescription) *ItemDescriptionUpdate {
	idu.mutation.predicates = append(idu.mutation.predicates, ps...)
	return idu
}

// SetDescription sets the "description" field.
func (idu *ItemDescriptionUpdate) SetDescription(s string) *ItemDescriptionUpdate {
	idu.mutation.SetDescription(s)
	return idu
}

// SetOwnerID sets the "owner" edge to the Item entity by ID.
func (idu *ItemDescriptionUpdate) SetOwnerID(id int) *ItemDescriptionUpdate {
	idu.mutation.SetOwnerID(id)
	return idu
}

// SetOwner sets the "owner" edge to the Item entity.
func (idu *ItemDescriptionUpdate) SetOwner(i *Item) *ItemDescriptionUpdate {
	return idu.SetOwnerID(i.ID)
}

// Mutation returns the ItemDescriptionMutation object of the builder.
func (idu *ItemDescriptionUpdate) Mutation() *ItemDescriptionMutation {
	return idu.mutation
}

// ClearOwner clears the "owner" edge to the Item entity.
func (idu *ItemDescriptionUpdate) ClearOwner() *ItemDescriptionUpdate {
	idu.mutation.ClearOwner()
	return idu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *ItemDescriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(idu.hooks) == 0 {
		if err = idu.check(); err != nil {
			return 0, err
		}
		affected, err = idu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = idu.check(); err != nil {
				return 0, err
			}
			idu.mutation = mutation
			affected, err = idu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(idu.hooks) - 1; i >= 0; i-- {
			mut = idu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, idu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (idu *ItemDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *ItemDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *ItemDescriptionUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idu *ItemDescriptionUpdate) check() error {
	if _, ok := idu.mutation.OwnerID(); idu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (idu *ItemDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemdescription.Table,
			Columns: itemdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemdescription.FieldID,
			},
		},
	}
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemdescription.FieldDescription,
		})
	}
	if idu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   itemdescription.OwnerTable,
			Columns: []string{itemdescription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   itemdescription.OwnerTable,
			Columns: []string{itemdescription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemdescription.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemDescriptionUpdateOne is the builder for updating a single ItemDescription entity.
type ItemDescriptionUpdateOne struct {
	config
	hooks    []Hook
	mutation *ItemDescriptionMutation
}

// SetDescription sets the "description" field.
func (iduo *ItemDescriptionUpdateOne) SetDescription(s string) *ItemDescriptionUpdateOne {
	iduo.mutation.SetDescription(s)
	return iduo
}

// SetOwnerID sets the "owner" edge to the Item entity by ID.
func (iduo *ItemDescriptionUpdateOne) SetOwnerID(id int) *ItemDescriptionUpdateOne {
	iduo.mutation.SetOwnerID(id)
	return iduo
}

// SetOwner sets the "owner" edge to the Item entity.
func (iduo *ItemDescriptionUpdateOne) SetOwner(i *Item) *ItemDescriptionUpdateOne {
	return iduo.SetOwnerID(i.ID)
}

// Mutation returns the ItemDescriptionMutation object of the builder.
func (iduo *ItemDescriptionUpdateOne) Mutation() *ItemDescriptionMutation {
	return iduo.mutation
}

// ClearOwner clears the "owner" edge to the Item entity.
func (iduo *ItemDescriptionUpdateOne) ClearOwner() *ItemDescriptionUpdateOne {
	iduo.mutation.ClearOwner()
	return iduo
}

// Save executes the query and returns the updated ItemDescription entity.
func (iduo *ItemDescriptionUpdateOne) Save(ctx context.Context) (*ItemDescription, error) {
	var (
		err  error
		node *ItemDescription
	)
	if len(iduo.hooks) == 0 {
		if err = iduo.check(); err != nil {
			return nil, err
		}
		node, err = iduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iduo.check(); err != nil {
				return nil, err
			}
			iduo.mutation = mutation
			node, err = iduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iduo.hooks) - 1; i >= 0; i-- {
			mut = iduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *ItemDescriptionUpdateOne) SaveX(ctx context.Context) *ItemDescription {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *ItemDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *ItemDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iduo *ItemDescriptionUpdateOne) check() error {
	if _, ok := iduo.mutation.OwnerID(); iduo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (iduo *ItemDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *ItemDescription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemdescription.Table,
			Columns: itemdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemdescription.FieldID,
			},
		},
	}
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ItemDescription.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iduo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemdescription.FieldDescription,
		})
	}
	if iduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   itemdescription.OwnerTable,
			Columns: []string{itemdescription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   itemdescription.OwnerTable,
			Columns: []string{itemdescription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ItemDescription{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{itemdescription.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
