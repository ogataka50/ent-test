// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemgroup"
	"github.com/ogataka50/ent-test/ent/predicate"
)

// ItemGroupQuery is the builder for querying ItemGroup entities.
type ItemGroupQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.ItemGroup
	// eager-loading edges.
	withGroupItem *ItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemGroupQuery builder.
func (igq *ItemGroupQuery) Where(ps ...predicate.ItemGroup) *ItemGroupQuery {
	igq.predicates = append(igq.predicates, ps...)
	return igq
}

// Limit adds a limit step to the query.
func (igq *ItemGroupQuery) Limit(limit int) *ItemGroupQuery {
	igq.limit = &limit
	return igq
}

// Offset adds an offset step to the query.
func (igq *ItemGroupQuery) Offset(offset int) *ItemGroupQuery {
	igq.offset = &offset
	return igq
}

// Order adds an order step to the query.
func (igq *ItemGroupQuery) Order(o ...OrderFunc) *ItemGroupQuery {
	igq.order = append(igq.order, o...)
	return igq
}

// QueryGroupItem chains the current query on the "group_item" edge.
func (igq *ItemGroupQuery) QueryGroupItem() *ItemQuery {
	query := &ItemQuery{config: igq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := igq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := igq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemgroup.Table, itemgroup.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, itemgroup.GroupItemTable, itemgroup.GroupItemPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(igq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ItemGroup entity from the query.
// Returns a *NotFoundError when no ItemGroup was found.
func (igq *ItemGroupQuery) First(ctx context.Context) (*ItemGroup, error) {
	nodes, err := igq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{itemgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (igq *ItemGroupQuery) FirstX(ctx context.Context) *ItemGroup {
	node, err := igq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ItemGroup ID from the query.
// Returns a *NotFoundError when no ItemGroup ID was found.
func (igq *ItemGroupQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = igq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{itemgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (igq *ItemGroupQuery) FirstIDX(ctx context.Context) int {
	id, err := igq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ItemGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ItemGroup entity is not found.
// Returns a *NotFoundError when no ItemGroup entities are found.
func (igq *ItemGroupQuery) Only(ctx context.Context) (*ItemGroup, error) {
	nodes, err := igq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{itemgroup.Label}
	default:
		return nil, &NotSingularError{itemgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (igq *ItemGroupQuery) OnlyX(ctx context.Context) *ItemGroup {
	node, err := igq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ItemGroup ID in the query.
// Returns a *NotSingularError when exactly one ItemGroup ID is not found.
// Returns a *NotFoundError when no entities are found.
func (igq *ItemGroupQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = igq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = &NotSingularError{itemgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (igq *ItemGroupQuery) OnlyIDX(ctx context.Context) int {
	id, err := igq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ItemGroups.
func (igq *ItemGroupQuery) All(ctx context.Context) ([]*ItemGroup, error) {
	if err := igq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return igq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (igq *ItemGroupQuery) AllX(ctx context.Context) []*ItemGroup {
	nodes, err := igq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ItemGroup IDs.
func (igq *ItemGroupQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := igq.Select(itemgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (igq *ItemGroupQuery) IDsX(ctx context.Context) []int {
	ids, err := igq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (igq *ItemGroupQuery) Count(ctx context.Context) (int, error) {
	if err := igq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return igq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (igq *ItemGroupQuery) CountX(ctx context.Context) int {
	count, err := igq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (igq *ItemGroupQuery) Exist(ctx context.Context) (bool, error) {
	if err := igq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return igq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (igq *ItemGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := igq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (igq *ItemGroupQuery) Clone() *ItemGroupQuery {
	if igq == nil {
		return nil
	}
	return &ItemGroupQuery{
		config:        igq.config,
		limit:         igq.limit,
		offset:        igq.offset,
		order:         append([]OrderFunc{}, igq.order...),
		predicates:    append([]predicate.ItemGroup{}, igq.predicates...),
		withGroupItem: igq.withGroupItem.Clone(),
		// clone intermediate query.
		sql:  igq.sql.Clone(),
		path: igq.path,
	}
}

// WithGroupItem tells the query-builder to eager-load the nodes that are connected to
// the "group_item" edge. The optional arguments are used to configure the query builder of the edge.
func (igq *ItemGroupQuery) WithGroupItem(opts ...func(*ItemQuery)) *ItemGroupQuery {
	query := &ItemQuery{config: igq.config}
	for _, opt := range opts {
		opt(query)
	}
	igq.withGroupItem = query
	return igq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ItemGroup.Query().
//		GroupBy(itemgroup.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (igq *ItemGroupQuery) GroupBy(field string, fields ...string) *ItemGroupGroupBy {
	group := &ItemGroupGroupBy{config: igq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := igq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return igq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ItemGroup.Query().
//		Select(itemgroup.FieldName).
//		Scan(ctx, &v)
//
func (igq *ItemGroupQuery) Select(field string, fields ...string) *ItemGroupSelect {
	igq.fields = append([]string{field}, fields...)
	return &ItemGroupSelect{ItemGroupQuery: igq}
}

func (igq *ItemGroupQuery) prepareQuery(ctx context.Context) error {
	for _, f := range igq.fields {
		if !itemgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if igq.path != nil {
		prev, err := igq.path(ctx)
		if err != nil {
			return err
		}
		igq.sql = prev
	}
	return nil
}

func (igq *ItemGroupQuery) sqlAll(ctx context.Context) ([]*ItemGroup, error) {
	var (
		nodes       = []*ItemGroup{}
		_spec       = igq.querySpec()
		loadedTypes = [1]bool{
			igq.withGroupItem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ItemGroup{config: igq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, igq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := igq.withGroupItem; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ItemGroup, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.GroupItem = []*Item{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ItemGroup)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   itemgroup.GroupItemTable,
				Columns: itemgroup.GroupItemPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(itemgroup.GroupItemPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, igq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "group_item": %v`, err)
		}
		query.Where(item.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "group_item" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.GroupItem = append(nodes[i].Edges.GroupItem, n)
			}
		}
	}

	return nodes, nil
}

func (igq *ItemGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := igq.querySpec()
	return sqlgraph.CountNodes(ctx, igq.driver, _spec)
}

func (igq *ItemGroupQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := igq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (igq *ItemGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemgroup.Table,
			Columns: itemgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemgroup.FieldID,
			},
		},
		From:   igq.sql,
		Unique: true,
	}
	if fields := igq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemgroup.FieldID)
		for i := range fields {
			if fields[i] != itemgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := igq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := igq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := igq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := igq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, itemgroup.ValidColumn)
			}
		}
	}
	return _spec
}

func (igq *ItemGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(igq.driver.Dialect())
	t1 := builder.Table(itemgroup.Table)
	selector := builder.Select(t1.Columns(itemgroup.Columns...)...).From(t1)
	if igq.sql != nil {
		selector = igq.sql
		selector.Select(selector.Columns(itemgroup.Columns...)...)
	}
	for _, p := range igq.predicates {
		p(selector)
	}
	for _, p := range igq.order {
		p(selector, itemgroup.ValidColumn)
	}
	if offset := igq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := igq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ItemGroupGroupBy is the group-by builder for ItemGroup entities.
type ItemGroupGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (iggb *ItemGroupGroupBy) Aggregate(fns ...AggregateFunc) *ItemGroupGroupBy {
	iggb.fns = append(iggb.fns, fns...)
	return iggb
}

// Scan applies the group-by query and scans the result into the given value.
func (iggb *ItemGroupGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := iggb.path(ctx)
	if err != nil {
		return err
	}
	iggb.sql = query
	return iggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := iggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(iggb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := iggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) StringsX(ctx context.Context) []string {
	v, err := iggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = iggb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) StringX(ctx context.Context) string {
	v, err := iggb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(iggb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := iggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) IntsX(ctx context.Context) []int {
	v, err := iggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = iggb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) IntX(ctx context.Context) int {
	v, err := iggb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(iggb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := iggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := iggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = iggb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) Float64X(ctx context.Context) float64 {
	v, err := iggb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(iggb.fields) > 1 {
		return nil, errors.New("ent: ItemGroupGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := iggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := iggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (iggb *ItemGroupGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = iggb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (iggb *ItemGroupGroupBy) BoolX(ctx context.Context) bool {
	v, err := iggb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (iggb *ItemGroupGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range iggb.fields {
		if !itemgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := iggb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := iggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (iggb *ItemGroupGroupBy) sqlQuery() *sql.Selector {
	selector := iggb.sql
	columns := make([]string, 0, len(iggb.fields)+len(iggb.fns))
	columns = append(columns, iggb.fields...)
	for _, fn := range iggb.fns {
		columns = append(columns, fn(selector, itemgroup.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(iggb.fields...)
}

// ItemGroupSelect is the builder for selecting fields of ItemGroup entities.
type ItemGroupSelect struct {
	*ItemGroupQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (igs *ItemGroupSelect) Scan(ctx context.Context, v interface{}) error {
	if err := igs.prepareQuery(ctx); err != nil {
		return err
	}
	igs.sql = igs.ItemGroupQuery.sqlQuery(ctx)
	return igs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (igs *ItemGroupSelect) ScanX(ctx context.Context, v interface{}) {
	if err := igs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Strings(ctx context.Context) ([]string, error) {
	if len(igs.fields) > 1 {
		return nil, errors.New("ent: ItemGroupSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := igs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (igs *ItemGroupSelect) StringsX(ctx context.Context) []string {
	v, err := igs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = igs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (igs *ItemGroupSelect) StringX(ctx context.Context) string {
	v, err := igs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Ints(ctx context.Context) ([]int, error) {
	if len(igs.fields) > 1 {
		return nil, errors.New("ent: ItemGroupSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := igs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (igs *ItemGroupSelect) IntsX(ctx context.Context) []int {
	v, err := igs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = igs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (igs *ItemGroupSelect) IntX(ctx context.Context) int {
	v, err := igs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(igs.fields) > 1 {
		return nil, errors.New("ent: ItemGroupSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := igs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (igs *ItemGroupSelect) Float64sX(ctx context.Context) []float64 {
	v, err := igs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = igs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (igs *ItemGroupSelect) Float64X(ctx context.Context) float64 {
	v, err := igs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(igs.fields) > 1 {
		return nil, errors.New("ent: ItemGroupSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := igs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (igs *ItemGroupSelect) BoolsX(ctx context.Context) []bool {
	v, err := igs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (igs *ItemGroupSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = igs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemgroup.Label}
	default:
		err = fmt.Errorf("ent: ItemGroupSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (igs *ItemGroupSelect) BoolX(ctx context.Context) bool {
	v, err := igs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (igs *ItemGroupSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := igs.sqlQuery().Query()
	if err := igs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (igs *ItemGroupSelect) sqlQuery() sql.Querier {
	selector := igs.sql
	selector.Select(selector.Columns(igs.fields...)...)
	return selector
}
