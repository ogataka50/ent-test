// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemvariation"
)

// ItemVariationCreate is the builder for creating a ItemVariation entity.
type ItemVariationCreate struct {
	config
	mutation *ItemVariationMutation
	hooks    []Hook
}

// SetVariantName sets the "variant_name" field.
func (ivc *ItemVariationCreate) SetVariantName(s string) *ItemVariationCreate {
	ivc.mutation.SetVariantName(s)
	return ivc
}

// SetOriginItemID sets the "origin_item" edge to the Item entity by ID.
func (ivc *ItemVariationCreate) SetOriginItemID(id int) *ItemVariationCreate {
	ivc.mutation.SetOriginItemID(id)
	return ivc
}

// SetOriginItem sets the "origin_item" edge to the Item entity.
func (ivc *ItemVariationCreate) SetOriginItem(i *Item) *ItemVariationCreate {
	return ivc.SetOriginItemID(i.ID)
}

// Mutation returns the ItemVariationMutation object of the builder.
func (ivc *ItemVariationCreate) Mutation() *ItemVariationMutation {
	return ivc.mutation
}

// Save creates the ItemVariation in the database.
func (ivc *ItemVariationCreate) Save(ctx context.Context) (*ItemVariation, error) {
	var (
		err  error
		node *ItemVariation
	)
	if len(ivc.hooks) == 0 {
		if err = ivc.check(); err != nil {
			return nil, err
		}
		node, err = ivc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemVariationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ivc.check(); err != nil {
				return nil, err
			}
			ivc.mutation = mutation
			node, err = ivc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ivc.hooks) - 1; i >= 0; i-- {
			mut = ivc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ivc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ivc *ItemVariationCreate) SaveX(ctx context.Context) *ItemVariation {
	v, err := ivc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ivc *ItemVariationCreate) check() error {
	if _, ok := ivc.mutation.VariantName(); !ok {
		return &ValidationError{Name: "variant_name", err: errors.New("ent: missing required field \"variant_name\"")}
	}
	if _, ok := ivc.mutation.OriginItemID(); !ok {
		return &ValidationError{Name: "origin_item", err: errors.New("ent: missing required edge \"origin_item\"")}
	}
	return nil
}

func (ivc *ItemVariationCreate) sqlSave(ctx context.Context) (*ItemVariation, error) {
	_node, _spec := ivc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ivc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ivc *ItemVariationCreate) createSpec() (*ItemVariation, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemVariation{config: ivc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: itemvariation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemvariation.FieldID,
			},
		}
	)
	if value, ok := ivc.mutation.VariantName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: itemvariation.FieldVariantName,
		})
		_node.VariantName = value
	}
	if nodes := ivc.mutation.OriginItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemvariation.OriginItemTable,
			Columns: []string{itemvariation.OriginItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemVariationCreateBulk is the builder for creating many ItemVariation entities in bulk.
type ItemVariationCreateBulk struct {
	config
	builders []*ItemVariationCreate
}

// Save creates the ItemVariation entities in the database.
func (ivcb *ItemVariationCreateBulk) Save(ctx context.Context) ([]*ItemVariation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ivcb.builders))
	nodes := make([]*ItemVariation, len(ivcb.builders))
	mutators := make([]Mutator, len(ivcb.builders))
	for i := range ivcb.builders {
		func(i int, root context.Context) {
			builder := ivcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemVariationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ivcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ivcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ivcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ivcb *ItemVariationCreateBulk) SaveX(ctx context.Context) []*ItemVariation {
	v, err := ivcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
