// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemvariation"
	"github.com/ogataka50/ent-test/ent/predicate"
)

// ItemVariationQuery is the builder for querying ItemVariation entities.
type ItemVariationQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.ItemVariation
	// eager-loading edges.
	withOriginItem *ItemQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ItemVariationQuery builder.
func (ivq *ItemVariationQuery) Where(ps ...predicate.ItemVariation) *ItemVariationQuery {
	ivq.predicates = append(ivq.predicates, ps...)
	return ivq
}

// Limit adds a limit step to the query.
func (ivq *ItemVariationQuery) Limit(limit int) *ItemVariationQuery {
	ivq.limit = &limit
	return ivq
}

// Offset adds an offset step to the query.
func (ivq *ItemVariationQuery) Offset(offset int) *ItemVariationQuery {
	ivq.offset = &offset
	return ivq
}

// Order adds an order step to the query.
func (ivq *ItemVariationQuery) Order(o ...OrderFunc) *ItemVariationQuery {
	ivq.order = append(ivq.order, o...)
	return ivq
}

// QueryOriginItem chains the current query on the "origin_item" edge.
func (ivq *ItemVariationQuery) QueryOriginItem() *ItemQuery {
	query := &ItemQuery{config: ivq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ivq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ivq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(itemvariation.Table, itemvariation.FieldID, selector),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, itemvariation.OriginItemTable, itemvariation.OriginItemColumn),
		)
		fromU = sqlgraph.SetNeighbors(ivq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ItemVariation entity from the query.
// Returns a *NotFoundError when no ItemVariation was found.
func (ivq *ItemVariationQuery) First(ctx context.Context) (*ItemVariation, error) {
	nodes, err := ivq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{itemvariation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ivq *ItemVariationQuery) FirstX(ctx context.Context) *ItemVariation {
	node, err := ivq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ItemVariation ID from the query.
// Returns a *NotFoundError when no ItemVariation ID was found.
func (ivq *ItemVariationQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{itemvariation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ivq *ItemVariationQuery) FirstIDX(ctx context.Context) int {
	id, err := ivq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ItemVariation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ItemVariation entity is not found.
// Returns a *NotFoundError when no ItemVariation entities are found.
func (ivq *ItemVariationQuery) Only(ctx context.Context) (*ItemVariation, error) {
	nodes, err := ivq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{itemvariation.Label}
	default:
		return nil, &NotSingularError{itemvariation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ivq *ItemVariationQuery) OnlyX(ctx context.Context) *ItemVariation {
	node, err := ivq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ItemVariation ID in the query.
// Returns a *NotSingularError when exactly one ItemVariation ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ivq *ItemVariationQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ivq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = &NotSingularError{itemvariation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ivq *ItemVariationQuery) OnlyIDX(ctx context.Context) int {
	id, err := ivq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ItemVariations.
func (ivq *ItemVariationQuery) All(ctx context.Context) ([]*ItemVariation, error) {
	if err := ivq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ivq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ivq *ItemVariationQuery) AllX(ctx context.Context) []*ItemVariation {
	nodes, err := ivq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ItemVariation IDs.
func (ivq *ItemVariationQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ivq.Select(itemvariation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ivq *ItemVariationQuery) IDsX(ctx context.Context) []int {
	ids, err := ivq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ivq *ItemVariationQuery) Count(ctx context.Context) (int, error) {
	if err := ivq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ivq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ivq *ItemVariationQuery) CountX(ctx context.Context) int {
	count, err := ivq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ivq *ItemVariationQuery) Exist(ctx context.Context) (bool, error) {
	if err := ivq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ivq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ivq *ItemVariationQuery) ExistX(ctx context.Context) bool {
	exist, err := ivq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ItemVariationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ivq *ItemVariationQuery) Clone() *ItemVariationQuery {
	if ivq == nil {
		return nil
	}
	return &ItemVariationQuery{
		config:         ivq.config,
		limit:          ivq.limit,
		offset:         ivq.offset,
		order:          append([]OrderFunc{}, ivq.order...),
		predicates:     append([]predicate.ItemVariation{}, ivq.predicates...),
		withOriginItem: ivq.withOriginItem.Clone(),
		// clone intermediate query.
		sql:  ivq.sql.Clone(),
		path: ivq.path,
	}
}

// WithOriginItem tells the query-builder to eager-load the nodes that are connected to
// the "origin_item" edge. The optional arguments are used to configure the query builder of the edge.
func (ivq *ItemVariationQuery) WithOriginItem(opts ...func(*ItemQuery)) *ItemVariationQuery {
	query := &ItemQuery{config: ivq.config}
	for _, opt := range opts {
		opt(query)
	}
	ivq.withOriginItem = query
	return ivq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VariantName string `json:"variant_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ItemVariation.Query().
//		GroupBy(itemvariation.FieldVariantName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ivq *ItemVariationQuery) GroupBy(field string, fields ...string) *ItemVariationGroupBy {
	group := &ItemVariationGroupBy{config: ivq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ivq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ivq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VariantName string `json:"variant_name,omitempty"`
//	}
//
//	client.ItemVariation.Query().
//		Select(itemvariation.FieldVariantName).
//		Scan(ctx, &v)
//
func (ivq *ItemVariationQuery) Select(field string, fields ...string) *ItemVariationSelect {
	ivq.fields = append([]string{field}, fields...)
	return &ItemVariationSelect{ItemVariationQuery: ivq}
}

func (ivq *ItemVariationQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ivq.fields {
		if !itemvariation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ivq.path != nil {
		prev, err := ivq.path(ctx)
		if err != nil {
			return err
		}
		ivq.sql = prev
	}
	return nil
}

func (ivq *ItemVariationQuery) sqlAll(ctx context.Context) ([]*ItemVariation, error) {
	var (
		nodes       = []*ItemVariation{}
		withFKs     = ivq.withFKs
		_spec       = ivq.querySpec()
		loadedTypes = [1]bool{
			ivq.withOriginItem != nil,
		}
	)
	if ivq.withOriginItem != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, itemvariation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ItemVariation{config: ivq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ivq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ivq.withOriginItem; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ItemVariation)
		for i := range nodes {
			if fk := nodes[i].item_item_variation; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(item.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "item_item_variation" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.OriginItem = n
			}
		}
	}

	return nodes, nil
}

func (ivq *ItemVariationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ivq.querySpec()
	return sqlgraph.CountNodes(ctx, ivq.driver, _spec)
}

func (ivq *ItemVariationQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ivq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (ivq *ItemVariationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   itemvariation.Table,
			Columns: itemvariation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: itemvariation.FieldID,
			},
		},
		From:   ivq.sql,
		Unique: true,
	}
	if fields := ivq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, itemvariation.FieldID)
		for i := range fields {
			if fields[i] != itemvariation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ivq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ivq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ivq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ivq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, itemvariation.ValidColumn)
			}
		}
	}
	return _spec
}

func (ivq *ItemVariationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ivq.driver.Dialect())
	t1 := builder.Table(itemvariation.Table)
	selector := builder.Select(t1.Columns(itemvariation.Columns...)...).From(t1)
	if ivq.sql != nil {
		selector = ivq.sql
		selector.Select(selector.Columns(itemvariation.Columns...)...)
	}
	for _, p := range ivq.predicates {
		p(selector)
	}
	for _, p := range ivq.order {
		p(selector, itemvariation.ValidColumn)
	}
	if offset := ivq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ivq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ItemVariationGroupBy is the group-by builder for ItemVariation entities.
type ItemVariationGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ivgb *ItemVariationGroupBy) Aggregate(fns ...AggregateFunc) *ItemVariationGroupBy {
	ivgb.fns = append(ivgb.fns, fns...)
	return ivgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ivgb *ItemVariationGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ivgb.path(ctx)
	if err != nil {
		return err
	}
	ivgb.sql = query
	return ivgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ivgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ivgb.fields) > 1 {
		return nil, errors.New("ent: ItemVariationGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ivgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) StringsX(ctx context.Context) []string {
	v, err := ivgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ivgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) StringX(ctx context.Context) string {
	v, err := ivgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ivgb.fields) > 1 {
		return nil, errors.New("ent: ItemVariationGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ivgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) IntsX(ctx context.Context) []int {
	v, err := ivgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ivgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) IntX(ctx context.Context) int {
	v, err := ivgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ivgb.fields) > 1 {
		return nil, errors.New("ent: ItemVariationGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ivgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ivgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ivgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ivgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ivgb.fields) > 1 {
		return nil, errors.New("ent: ItemVariationGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ivgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ivgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ivgb *ItemVariationGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ivgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ivgb *ItemVariationGroupBy) BoolX(ctx context.Context) bool {
	v, err := ivgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ivgb *ItemVariationGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ivgb.fields {
		if !itemvariation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ivgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ivgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ivgb *ItemVariationGroupBy) sqlQuery() *sql.Selector {
	selector := ivgb.sql
	columns := make([]string, 0, len(ivgb.fields)+len(ivgb.fns))
	columns = append(columns, ivgb.fields...)
	for _, fn := range ivgb.fns {
		columns = append(columns, fn(selector, itemvariation.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(ivgb.fields...)
}

// ItemVariationSelect is the builder for selecting fields of ItemVariation entities.
type ItemVariationSelect struct {
	*ItemVariationQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ivs *ItemVariationSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ivs.prepareQuery(ctx); err != nil {
		return err
	}
	ivs.sql = ivs.ItemVariationQuery.sqlQuery(ctx)
	return ivs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ivs *ItemVariationSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ivs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ivs.fields) > 1 {
		return nil, errors.New("ent: ItemVariationSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ivs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ivs *ItemVariationSelect) StringsX(ctx context.Context) []string {
	v, err := ivs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ivs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ivs *ItemVariationSelect) StringX(ctx context.Context) string {
	v, err := ivs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ivs.fields) > 1 {
		return nil, errors.New("ent: ItemVariationSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ivs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ivs *ItemVariationSelect) IntsX(ctx context.Context) []int {
	v, err := ivs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ivs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ivs *ItemVariationSelect) IntX(ctx context.Context) int {
	v, err := ivs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ivs.fields) > 1 {
		return nil, errors.New("ent: ItemVariationSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ivs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ivs *ItemVariationSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ivs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ivs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ivs *ItemVariationSelect) Float64X(ctx context.Context) float64 {
	v, err := ivs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ivs.fields) > 1 {
		return nil, errors.New("ent: ItemVariationSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ivs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ivs *ItemVariationSelect) BoolsX(ctx context.Context) []bool {
	v, err := ivs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ivs *ItemVariationSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ivs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{itemvariation.Label}
	default:
		err = fmt.Errorf("ent: ItemVariationSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ivs *ItemVariationSelect) BoolX(ctx context.Context) bool {
	v, err := ivs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ivs *ItemVariationSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ivs.sqlQuery().Query()
	if err := ivs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ivs *ItemVariationSelect) sqlQuery() sql.Querier {
	selector := ivs.sql
	selector.Select(selector.Columns(ivs.fields...)...)
	return selector
}
