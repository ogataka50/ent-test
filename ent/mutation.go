// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/ogataka50/ent-test/ent/item"
	"github.com/ogataka50/ent-test/ent/itemdescription"
	"github.com/ogataka50/ent-test/ent/itemgroup"
	"github.com/ogataka50/ent-test/ent/itemvariation"
	"github.com/ogataka50/ent-test/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem            = "Item"
	TypeItemDescription = "ItemDescription"
	TypeItemGroup       = "ItemGroup"
	TypeItemVariation   = "ItemVariation"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	name                    *string
	clearedFields           map[string]struct{}
	item_description        *int
	cleareditem_description bool
	item_variation          map[int]struct{}
	removeditem_variation   map[int]struct{}
	cleareditem_variation   bool
	item_group              map[int]struct{}
	removeditem_group       map[int]struct{}
	cleareditem_group       bool
	done                    bool
	oldValue                func(context.Context) (*Item, error)
	predicates              []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// SetItemDescriptionID sets the "item_description" edge to the ItemDescription entity by id.
func (m *ItemMutation) SetItemDescriptionID(id int) {
	m.item_description = &id
}

// ClearItemDescription clears the "item_description" edge to the ItemDescription entity.
func (m *ItemMutation) ClearItemDescription() {
	m.cleareditem_description = true
}

// ItemDescriptionCleared returns if the "item_description" edge to the ItemDescription entity was cleared.
func (m *ItemMutation) ItemDescriptionCleared() bool {
	return m.cleareditem_description
}

// ItemDescriptionID returns the "item_description" edge ID in the mutation.
func (m *ItemMutation) ItemDescriptionID() (id int, exists bool) {
	if m.item_description != nil {
		return *m.item_description, true
	}
	return
}

// ItemDescriptionIDs returns the "item_description" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemDescriptionID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) ItemDescriptionIDs() (ids []int) {
	if id := m.item_description; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItemDescription resets all changes to the "item_description" edge.
func (m *ItemMutation) ResetItemDescription() {
	m.item_description = nil
	m.cleareditem_description = false
}

// AddItemVariationIDs adds the "item_variation" edge to the ItemVariation entity by ids.
func (m *ItemMutation) AddItemVariationIDs(ids ...int) {
	if m.item_variation == nil {
		m.item_variation = make(map[int]struct{})
	}
	for i := range ids {
		m.item_variation[ids[i]] = struct{}{}
	}
}

// ClearItemVariation clears the "item_variation" edge to the ItemVariation entity.
func (m *ItemMutation) ClearItemVariation() {
	m.cleareditem_variation = true
}

// ItemVariationCleared returns if the "item_variation" edge to the ItemVariation entity was cleared.
func (m *ItemMutation) ItemVariationCleared() bool {
	return m.cleareditem_variation
}

// RemoveItemVariationIDs removes the "item_variation" edge to the ItemVariation entity by IDs.
func (m *ItemMutation) RemoveItemVariationIDs(ids ...int) {
	if m.removeditem_variation == nil {
		m.removeditem_variation = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_variation[ids[i]] = struct{}{}
	}
}

// RemovedItemVariation returns the removed IDs of the "item_variation" edge to the ItemVariation entity.
func (m *ItemMutation) RemovedItemVariationIDs() (ids []int) {
	for id := range m.removeditem_variation {
		ids = append(ids, id)
	}
	return
}

// ItemVariationIDs returns the "item_variation" edge IDs in the mutation.
func (m *ItemMutation) ItemVariationIDs() (ids []int) {
	for id := range m.item_variation {
		ids = append(ids, id)
	}
	return
}

// ResetItemVariation resets all changes to the "item_variation" edge.
func (m *ItemMutation) ResetItemVariation() {
	m.item_variation = nil
	m.cleareditem_variation = false
	m.removeditem_variation = nil
}

// AddItemGroupIDs adds the "item_group" edge to the ItemGroup entity by ids.
func (m *ItemMutation) AddItemGroupIDs(ids ...int) {
	if m.item_group == nil {
		m.item_group = make(map[int]struct{})
	}
	for i := range ids {
		m.item_group[ids[i]] = struct{}{}
	}
}

// ClearItemGroup clears the "item_group" edge to the ItemGroup entity.
func (m *ItemMutation) ClearItemGroup() {
	m.cleareditem_group = true
}

// ItemGroupCleared returns if the "item_group" edge to the ItemGroup entity was cleared.
func (m *ItemMutation) ItemGroupCleared() bool {
	return m.cleareditem_group
}

// RemoveItemGroupIDs removes the "item_group" edge to the ItemGroup entity by IDs.
func (m *ItemMutation) RemoveItemGroupIDs(ids ...int) {
	if m.removeditem_group == nil {
		m.removeditem_group = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem_group[ids[i]] = struct{}{}
	}
}

// RemovedItemGroup returns the removed IDs of the "item_group" edge to the ItemGroup entity.
func (m *ItemMutation) RemovedItemGroupIDs() (ids []int) {
	for id := range m.removeditem_group {
		ids = append(ids, id)
	}
	return
}

// ItemGroupIDs returns the "item_group" edge IDs in the mutation.
func (m *ItemMutation) ItemGroupIDs() (ids []int) {
	for id := range m.item_group {
		ids = append(ids, id)
	}
	return
}

// ResetItemGroup resets all changes to the "item_group" edge.
func (m *ItemMutation) ResetItemGroup() {
	m.item_group = nil
	m.cleareditem_group = false
	m.removeditem_group = nil
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.item_description != nil {
		edges = append(edges, item.EdgeItemDescription)
	}
	if m.item_variation != nil {
		edges = append(edges, item.EdgeItemVariation)
	}
	if m.item_group != nil {
		edges = append(edges, item.EdgeItemGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeItemDescription:
		if id := m.item_description; id != nil {
			return []ent.Value{*id}
		}
	case item.EdgeItemVariation:
		ids := make([]ent.Value, 0, len(m.item_variation))
		for id := range m.item_variation {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeItemGroup:
		ids := make([]ent.Value, 0, len(m.item_group))
		for id := range m.item_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeditem_variation != nil {
		edges = append(edges, item.EdgeItemVariation)
	}
	if m.removeditem_group != nil {
		edges = append(edges, item.EdgeItemGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeItemVariation:
		ids := make([]ent.Value, 0, len(m.removeditem_variation))
		for id := range m.removeditem_variation {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeItemGroup:
		ids := make([]ent.Value, 0, len(m.removeditem_group))
		for id := range m.removeditem_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareditem_description {
		edges = append(edges, item.EdgeItemDescription)
	}
	if m.cleareditem_variation {
		edges = append(edges, item.EdgeItemVariation)
	}
	if m.cleareditem_group {
		edges = append(edges, item.EdgeItemGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeItemDescription:
		return m.cleareditem_description
	case item.EdgeItemVariation:
		return m.cleareditem_variation
	case item.EdgeItemGroup:
		return m.cleareditem_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeItemDescription:
		m.ClearItemDescription()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeItemDescription:
		m.ResetItemDescription()
		return nil
	case item.EdgeItemVariation:
		m.ResetItemVariation()
		return nil
	case item.EdgeItemGroup:
		m.ResetItemGroup()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ItemDescriptionMutation represents an operation that mutates the ItemDescription nodes in the graph.
type ItemDescriptionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	description   *string
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*ItemDescription, error)
	predicates    []predicate.ItemDescription
}

var _ ent.Mutation = (*ItemDescriptionMutation)(nil)

// itemdescriptionOption allows management of the mutation configuration using functional options.
type itemdescriptionOption func(*ItemDescriptionMutation)

// newItemDescriptionMutation creates new mutation for the ItemDescription entity.
func newItemDescriptionMutation(c config, op Op, opts ...itemdescriptionOption) *ItemDescriptionMutation {
	m := &ItemDescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeItemDescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemDescriptionID sets the ID field of the mutation.
func withItemDescriptionID(id int) itemdescriptionOption {
	return func(m *ItemDescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemDescription
		)
		m.oldValue = func(ctx context.Context) (*ItemDescription, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemDescription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemDescription sets the old ItemDescription of the mutation.
func withItemDescription(node *ItemDescription) itemdescriptionOption {
	return func(m *ItemDescriptionMutation) {
		m.oldValue = func(context.Context) (*ItemDescription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemDescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemDescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ItemDescriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDescription sets the "description" field.
func (m *ItemDescriptionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ItemDescriptionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ItemDescription entity.
// If the ItemDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemDescriptionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ItemDescriptionMutation) ResetDescription() {
	m.description = nil
}

// SetOwnerID sets the "owner" edge to the Item entity by id.
func (m *ItemDescriptionMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Item entity.
func (m *ItemDescriptionMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the "owner" edge to the Item entity was cleared.
func (m *ItemDescriptionMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ItemDescriptionMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ItemDescriptionMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ItemDescriptionMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Op returns the operation name.
func (m *ItemDescriptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ItemDescription).
func (m *ItemDescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemDescriptionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.description != nil {
		fields = append(fields, itemdescription.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemDescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemdescription.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemDescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemdescription.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown ItemDescription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemDescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemdescription.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown ItemDescription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemDescriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemDescriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemDescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ItemDescription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemDescriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemDescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemDescriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ItemDescription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemDescriptionMutation) ResetField(name string) error {
	switch name {
	case itemdescription.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown ItemDescription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemDescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, itemdescription.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemDescriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemdescription.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemDescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemDescriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemDescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, itemdescription.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemDescriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case itemdescription.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemDescriptionMutation) ClearEdge(name string) error {
	switch name {
	case itemdescription.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown ItemDescription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemDescriptionMutation) ResetEdge(name string) error {
	switch name {
	case itemdescription.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown ItemDescription edge %s", name)
}

// ItemGroupMutation represents an operation that mutates the ItemGroup nodes in the graph.
type ItemGroupMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	clearedFields     map[string]struct{}
	group_item        map[int]struct{}
	removedgroup_item map[int]struct{}
	clearedgroup_item bool
	done              bool
	oldValue          func(context.Context) (*ItemGroup, error)
	predicates        []predicate.ItemGroup
}

var _ ent.Mutation = (*ItemGroupMutation)(nil)

// itemgroupOption allows management of the mutation configuration using functional options.
type itemgroupOption func(*ItemGroupMutation)

// newItemGroupMutation creates new mutation for the ItemGroup entity.
func newItemGroupMutation(c config, op Op, opts ...itemgroupOption) *ItemGroupMutation {
	m := &ItemGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeItemGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemGroupID sets the ID field of the mutation.
func withItemGroupID(id int) itemgroupOption {
	return func(m *ItemGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemGroup
		)
		m.oldValue = func(ctx context.Context) (*ItemGroup, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemGroup sets the old ItemGroup of the mutation.
func withItemGroup(node *ItemGroup) itemgroupOption {
	return func(m *ItemGroupMutation) {
		m.oldValue = func(context.Context) (*ItemGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ItemGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ItemGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ItemGroup entity.
// If the ItemGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemGroupMutation) ResetName() {
	m.name = nil
}

// AddGroupItemIDs adds the "group_item" edge to the Item entity by ids.
func (m *ItemGroupMutation) AddGroupItemIDs(ids ...int) {
	if m.group_item == nil {
		m.group_item = make(map[int]struct{})
	}
	for i := range ids {
		m.group_item[ids[i]] = struct{}{}
	}
}

// ClearGroupItem clears the "group_item" edge to the Item entity.
func (m *ItemGroupMutation) ClearGroupItem() {
	m.clearedgroup_item = true
}

// GroupItemCleared returns if the "group_item" edge to the Item entity was cleared.
func (m *ItemGroupMutation) GroupItemCleared() bool {
	return m.clearedgroup_item
}

// RemoveGroupItemIDs removes the "group_item" edge to the Item entity by IDs.
func (m *ItemGroupMutation) RemoveGroupItemIDs(ids ...int) {
	if m.removedgroup_item == nil {
		m.removedgroup_item = make(map[int]struct{})
	}
	for i := range ids {
		m.removedgroup_item[ids[i]] = struct{}{}
	}
}

// RemovedGroupItem returns the removed IDs of the "group_item" edge to the Item entity.
func (m *ItemGroupMutation) RemovedGroupItemIDs() (ids []int) {
	for id := range m.removedgroup_item {
		ids = append(ids, id)
	}
	return
}

// GroupItemIDs returns the "group_item" edge IDs in the mutation.
func (m *ItemGroupMutation) GroupItemIDs() (ids []int) {
	for id := range m.group_item {
		ids = append(ids, id)
	}
	return
}

// ResetGroupItem resets all changes to the "group_item" edge.
func (m *ItemGroupMutation) ResetGroupItem() {
	m.group_item = nil
	m.clearedgroup_item = false
	m.removedgroup_item = nil
}

// Op returns the operation name.
func (m *ItemGroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ItemGroup).
func (m *ItemGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemGroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, itemgroup.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemgroup.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemgroup.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ItemGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemgroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ItemGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ItemGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ItemGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemGroupMutation) ResetField(name string) error {
	switch name {
	case itemgroup.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ItemGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group_item != nil {
		edges = append(edges, itemgroup.EdgeGroupItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemgroup.EdgeGroupItem:
		ids := make([]ent.Value, 0, len(m.group_item))
		for id := range m.group_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgroup_item != nil {
		edges = append(edges, itemgroup.EdgeGroupItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case itemgroup.EdgeGroupItem:
		ids := make([]ent.Value, 0, len(m.removedgroup_item))
		for id := range m.removedgroup_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup_item {
		edges = append(edges, itemgroup.EdgeGroupItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case itemgroup.EdgeGroupItem:
		return m.clearedgroup_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ItemGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemGroupMutation) ResetEdge(name string) error {
	switch name {
	case itemgroup.EdgeGroupItem:
		m.ResetGroupItem()
		return nil
	}
	return fmt.Errorf("unknown ItemGroup edge %s", name)
}

// ItemVariationMutation represents an operation that mutates the ItemVariation nodes in the graph.
type ItemVariationMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	variant_name       *string
	clearedFields      map[string]struct{}
	origin_item        *int
	clearedorigin_item bool
	done               bool
	oldValue           func(context.Context) (*ItemVariation, error)
	predicates         []predicate.ItemVariation
}

var _ ent.Mutation = (*ItemVariationMutation)(nil)

// itemvariationOption allows management of the mutation configuration using functional options.
type itemvariationOption func(*ItemVariationMutation)

// newItemVariationMutation creates new mutation for the ItemVariation entity.
func newItemVariationMutation(c config, op Op, opts ...itemvariationOption) *ItemVariationMutation {
	m := &ItemVariationMutation{
		config:        c,
		op:            op,
		typ:           TypeItemVariation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemVariationID sets the ID field of the mutation.
func withItemVariationID(id int) itemvariationOption {
	return func(m *ItemVariationMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemVariation
		)
		m.oldValue = func(ctx context.Context) (*ItemVariation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemVariation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemVariation sets the old ItemVariation of the mutation.
func withItemVariation(node *ItemVariation) itemvariationOption {
	return func(m *ItemVariationMutation) {
		m.oldValue = func(context.Context) (*ItemVariation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemVariationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemVariationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ItemVariationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetVariantName sets the "variant_name" field.
func (m *ItemVariationMutation) SetVariantName(s string) {
	m.variant_name = &s
}

// VariantName returns the value of the "variant_name" field in the mutation.
func (m *ItemVariationMutation) VariantName() (r string, exists bool) {
	v := m.variant_name
	if v == nil {
		return
	}
	return *v, true
}

// OldVariantName returns the old "variant_name" field's value of the ItemVariation entity.
// If the ItemVariation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemVariationMutation) OldVariantName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVariantName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVariantName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVariantName: %w", err)
	}
	return oldValue.VariantName, nil
}

// ResetVariantName resets all changes to the "variant_name" field.
func (m *ItemVariationMutation) ResetVariantName() {
	m.variant_name = nil
}

// SetOriginItemID sets the "origin_item" edge to the Item entity by id.
func (m *ItemVariationMutation) SetOriginItemID(id int) {
	m.origin_item = &id
}

// ClearOriginItem clears the "origin_item" edge to the Item entity.
func (m *ItemVariationMutation) ClearOriginItem() {
	m.clearedorigin_item = true
}

// OriginItemCleared returns if the "origin_item" edge to the Item entity was cleared.
func (m *ItemVariationMutation) OriginItemCleared() bool {
	return m.clearedorigin_item
}

// OriginItemID returns the "origin_item" edge ID in the mutation.
func (m *ItemVariationMutation) OriginItemID() (id int, exists bool) {
	if m.origin_item != nil {
		return *m.origin_item, true
	}
	return
}

// OriginItemIDs returns the "origin_item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OriginItemID instead. It exists only for internal usage by the builders.
func (m *ItemVariationMutation) OriginItemIDs() (ids []int) {
	if id := m.origin_item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOriginItem resets all changes to the "origin_item" edge.
func (m *ItemVariationMutation) ResetOriginItem() {
	m.origin_item = nil
	m.clearedorigin_item = false
}

// Op returns the operation name.
func (m *ItemVariationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ItemVariation).
func (m *ItemVariationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemVariationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.variant_name != nil {
		fields = append(fields, itemvariation.FieldVariantName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemVariationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemvariation.FieldVariantName:
		return m.VariantName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemVariationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemvariation.FieldVariantName:
		return m.OldVariantName(ctx)
	}
	return nil, fmt.Errorf("unknown ItemVariation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemVariationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemvariation.FieldVariantName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVariantName(v)
		return nil
	}
	return fmt.Errorf("unknown ItemVariation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemVariationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemVariationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemVariationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ItemVariation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemVariationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemVariationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemVariationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ItemVariation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemVariationMutation) ResetField(name string) error {
	switch name {
	case itemvariation.FieldVariantName:
		m.ResetVariantName()
		return nil
	}
	return fmt.Errorf("unknown ItemVariation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemVariationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.origin_item != nil {
		edges = append(edges, itemvariation.EdgeOriginItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemVariationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemvariation.EdgeOriginItem:
		if id := m.origin_item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemVariationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemVariationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemVariationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorigin_item {
		edges = append(edges, itemvariation.EdgeOriginItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemVariationMutation) EdgeCleared(name string) bool {
	switch name {
	case itemvariation.EdgeOriginItem:
		return m.clearedorigin_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemVariationMutation) ClearEdge(name string) error {
	switch name {
	case itemvariation.EdgeOriginItem:
		m.ClearOriginItem()
		return nil
	}
	return fmt.Errorf("unknown ItemVariation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemVariationMutation) ResetEdge(name string) error {
	switch name {
	case itemvariation.EdgeOriginItem:
		m.ResetOriginItem()
		return nil
	}
	return fmt.Errorf("unknown ItemVariation edge %s", name)
}
